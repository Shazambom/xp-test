/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ExPopulusCardGameLogic,
  ExPopulusCardGameLogicInterface,
} from "../ExPopulusCardGameLogic";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_cards",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gameHash",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "attack",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "health",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "ability",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct ExPopulusCardGameLogic.CardData[]",
        name: "playerDeck",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "attack",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "health",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "ability",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct ExPopulusCardGameLogic.CardData[]",
        name: "enemyDeck",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "result",
        type: "uint8",
      },
    ],
    name: "BattleResult",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256[3]",
        name: "ids",
        type: "uint256[3]",
      },
    ],
    name: "battle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cards",
    outputs: [
      {
        internalType: "contract ExPopulusCards",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "data",
        type: "uint256",
      },
    ],
    name: "decodeState",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "abilityUsed",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "frozen",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "shielded",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "health",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "ability",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "attack",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "index",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "length",
            type: "uint8",
          },
        ],
        internalType: "struct ExPopulusCardGameLogic.State",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "abilityUsed",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "frozen",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "shielded",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "health",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "ability",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "attack",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "index",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "length",
            type: "uint8",
          },
        ],
        internalType: "struct ExPopulusCardGameLogic.State",
        name: "state",
        type: "tuple",
      },
    ],
    name: "encodeState",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "gameTurns",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gameHash",
        type: "uint256",
      },
    ],
    name: "getGameTurns",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "abilityUsed",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "frozen",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "shielded",
                type: "bool",
              },
              {
                internalType: "uint8",
                name: "health",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "ability",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "attack",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "index",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "length",
                type: "uint8",
              },
            ],
            internalType: "struct ExPopulusCardGameLogic.State",
            name: "playerState",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "abilityUsed",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "frozen",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "shielded",
                type: "bool",
              },
              {
                internalType: "uint8",
                name: "health",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "ability",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "attack",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "index",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "length",
                type: "uint8",
              },
            ],
            internalType: "struct ExPopulusCardGameLogic.State",
            name: "enemyState",
            type: "tuple",
          },
        ],
        internalType: "struct ExPopulusCardGameLogic.Turn[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "abilityUsed",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "frozen",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "shielded",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "health",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "ability",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "attack",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "index",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "length",
            type: "uint8",
          },
        ],
        internalType: "struct ExPopulusCardGameLogic.State",
        name: "playerState",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "abilityUsed",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "frozen",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "shielded",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "health",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "ability",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "attack",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "index",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "length",
            type: "uint8",
          },
        ],
        internalType: "struct ExPopulusCardGameLogic.State",
        name: "enemyState",
        type: "tuple",
      },
    ],
    name: "getTurn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "records",
    outputs: [
      {
        internalType: "uint256",
        name: "wins",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "losses",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "draws",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "streak",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_cards",
        type: "address",
      },
    ],
    name: "setCards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "setToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract ExPopulusToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[3]",
        name: "ids",
        type: "uint256[3]",
      },
    ],
    name: "validate",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000196001553480156200001757600080fd5b5060405162001ff838038062001ff88339810160408190526200003a916200010c565b33806200006157604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006c816200009f565b50600280546001600160a01b039384166001600160a01b0319918216179091556003805492909316911617905562000144565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010757600080fd5b919050565b600080604083850312156200012057600080fd5b6200012b83620000ef565b91506200013b60208401620000ef565b90509250929050565b611ea480620001546000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063e350e5c911610066578063e350e5c914610303578063f2fde38b14610316578063fc0c546a14610329578063ff0b17d61461033c57600080fd5b8063715018a6146102b75780638da5cb5b146102bf578063bec8f3c2146102d0578063e1beb977146102f057600080fd5b80634537a22e116100d35780634537a22e14610148578063469e90671461022457806358a4903f1461027957806363c5633e146102a457600080fd5b8063144fa6d7146100fa5780632a74b2e01461010f57806338f73fa214610122575b600080fd5b61010d610108366004611906565b61034f565b005b61010d61011d366004611969565b610386565b610135610130366004611ace565b610d2e565b6040519081526020015b60405180910390f35b610217610156366004611b05565b604080516101008082018352600080835260208084018290528385018290526060808501839052608080860184905260a080870185905260c080880186905260e09788019590955287519586018852600160f88a901c81168114875260f78a901c811681149487019490945260f689901c84169093149685019690965260ff60ee88901c81169185019190915260e687901c81169584019590955260de86901c85169083015260d685901c84169082015260ce9390931c9091169082015290565b60405161013f9190611b99565b610259610232366004611906565b60046020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161013f565b60025461028c906001600160a01b031681565b6040516001600160a01b03909116815260200161013f565b61010d6102b2366004611969565b610d58565b61010d610fe5565b6000546001600160a01b031661028c565b6102e36102de366004611b05565b610ff9565b60405161013f9190611ba8565b6101356102fe366004611c0b565b611350565b61010d610311366004611906565b611381565b61010d610324366004611906565b6113b8565b60035461028c906001600160a01b031681565b61013561034a366004611c2d565b61140c565b610357611510565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3233146103da5760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c792077616c6c657473000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6103e381610d58565b60006103f0600154611556565b600081815260056020526040812091925061040a846115b6565b9050600061048d600260009054906101000a90046001600160a01b03166001600160a01b031663d8fc7a626040518163ffffffff1660e01b8152600401606060405180830381865afa158015610464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104889190611c4a565b6115b6565b90506000604051806101000160405280600015158152602001600015158152602001600015158152602001846000815181106104cb576104cb611c9f565b60200260200101516020015160ff168152602001846000815181106104f2576104f2611c9f565b60200260200101516040015160ff1681526020018460008151811061051957610519611c9f565b60200260200101516000015160ff168152602001600060ff168152602001845160ff16815250905060006040518061010001604052806000151581526020016000151581526020016000151581526020018460008151811061057d5761057d611c9f565b60200260200101516020015160ff168152602001846000815181106105a4576105a4611c9f565b60200260200101516040015160ff168152602001846000815181106105cb576105cb611c9f565b6020908102919091018101515160ff908116835260008383018190528751909116604093840152825161010080820185528282528184018390528185018390526060808301849052608080840185905260a080850186905260c080860187905260e080870188905289519586018a5287865297850187905297840186905291830185905282018490528101839052938401829052918301529192505b85518460c0015160ff16108015610685575084518360c0015160ff16105b15610bc457835115801561069857508251155b156108175760018085528352600254608080860151908501516040517f6887eee800000000000000000000000000000000000000000000000000000000815260ff9283166004820152911660248201526001600160a01b0390911690636887eee890604401602060405180830381865afa15801561071a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073e9190611cb5565b1561074d575082905081610753565b50819050825b6000806000610765856080015161172f565b151560208701529015156040870152925082156107b35760e084015160ff1660c0850152896107948888610d2e565b8154600181018355600092835260209092209091015550610bc4915050565b836020015161080f576107c9846080015161172f565b91151560408701529250905081156107f35760e085015160ff1660c0860152896107948888610d2e565b80801561080257508460400151155b1561080f57600160208601525b5050506108cf565b8351610883576001845260808401516000906108329061172f565b1515602087015290151560408701529050801561087d5760e084015160ff1660c0850152876108618686610d2e565b8154600181018355600092835260209092209091015550610bc4565b506108cf565b82516108cf5760018352608083015160009061089e9061172f565b151560208801529015156040860152905080156108cd5760e085015160ff1660c0860152876108618686610d2e565b505b8360200151806108e0575082604001515b156109bd578260a0015160ff16846060015160ff161161099c5760c0840180519061090a82611ce8565b60ff1660ff168152505085518460c0015160ff1603610949578661092e8585610d2e565b81546001810183556000928352602090922090910155610bc4565b61099784878660c0015160ff168151811061096657610966611c9f565b6020026020010151602081015160ff908116606084015260408201518116608084015290511660a082015260009052565b610b83565b8260a00151846060018181516109b29190611d07565b60ff16905250610b83565b8260200151806109ce575083604001515b15610a55578360a0015160ff16836060015160ff1611610a3f5760c083018051906109f882611ce8565b60ff1660ff16815250508260e0015160ff168360c0015160ff1603610a22578661092e8585610d2e565b61099783868560c0015160ff168151811061096657610966611c9f565b8360a00151836060018181516109b29190611d07565b8260a0015160ff16846060015160ff1611610a815760c08401805190610a7a82611ce8565b60ff169052505b8360a0015160ff16836060015160ff1611610aad5760c08301805190610aa682611ce8565b60ff169052505b85518460c0015160ff161480610ad057508260e0015160ff168360c0015160ff16145b15610ae0578661092e8585610d2e565b8260a0015160ff16846060015160ff1611610b1757610b1284878660c0015160ff168151811061096657610966611c9f565b610b34565b8260a0015184606001818151610b2d9190611d07565b60ff169052505b8360a0015160ff16836060015160ff1611610b665761099783868560c0015160ff168151811061096657610966611c9f565b8360a0015183606001818151610b7c9190611d07565b60ff169052505b86610b8e8585610d2e565b81546001810183556000928352602080842090910191909155850181905260408501526000602084018190526040840152610667565b336000908152600460209081526040808320815160808101835281548152600182015493810193909352600281015491830191909152600301546060820152875160c087015191929160ff16148015610c24575086518560c0015160ff16145b15610c455760408201805190610c3982611d20565b90525060009050610c9d565b87518660c0015160ff1603610c765760208201805190610c6482611d20565b90525050600060608201526002610c9d565b815182610c8282611d20565b90525060608201805190610c9582611d20565b905250600190505b3360009081526004602090815260409182902084518082559185015160018201559184015160028301556060840151600390920191909155610ce29060ff83166117f0565b7f6aeaa88470c08aa431fe4452b98ae2afdd6dc449509ae67ba2487e570951abbd338b8a8a85604051610d19959493929190611d92565b60405180910390a15050505050505050505050565b600080610d3a8461140c565b90506000610d478461140c565b60801c919091179150505b92915050565b60025481516040516331a9108f60e11b8152600481019190915233916001600160a01b031690636352211e90602401602060405180830381865afa158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc89190611de2565b6001600160a01b031614158015610ddf5750805115155b80610e72575060025460208201516040516331a9108f60e11b8152600481019190915233916001600160a01b031690636352211e90602401602060405180830381865afa158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e589190611de2565b6001600160a01b031614158015610e725750602081015115155b80610f05575060025460408083015190516331a9108f60e11b8152600481019190915233916001600160a01b031690636352211e90602401602060405180830381865afa158015610ec7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eeb9190611de2565b6001600160a01b031614158015610f055750604081015115155b15610f525760405162461bcd60e51b815260206004820152601660248201527f796f75206d757374206f776e20616c6c2063617264730000000000000000000060448201526064016103d1565b602081015181511480610f69575060408101518151145b8015610f755750805115155b80610f95575060408101516020820151148015610f955750602081015115155b15610fe25760405162461bcd60e51b815260206004820152601260248201527f696473206d75737420626520756e69717565000000000000000000000000000060448201526064016103d1565b50565b610fed611510565b610ff76000611894565b565b600081815260056020908152604080832080548251818502810185019093528083526060949383018282801561104e57602002820191906000526020600020905b81548152602001906001019080831161103a575b505050505090506000815167ffffffffffffffff8111156110715761107161192a565b60405190808252806020026020018201604052801561113657816020015b61112360408051610140810182526000918101828152606082018390526080820183905260a0820183905260c0820183905260e0820183905261010082018390526101208201929092529081908152604080516101008101825260008082526020828101829052928201819052606082018190526080820181905260a0820181905260c0820181905260e082015291015290565b81526020019060019003908161108f5790505b50905060005b825181101561134857604051806040016040528061122e85848151811061116557611165611c9f565b6020026020010151604080516101008082018352600080835260208084018290528385018290526060808501839052608080860184905260a080870185905260c080880186905260e09788019590955287519586018852600160f88a901c81168114875260f78a901c811681149487019490945260f689901c84169093149685019690965260ff60ee88901c81169185019190915260e687901c81169584019590955260de86901c85169083015260d685901c84169082015260ce9390931c9091169082015290565b8152602001611315608086858151811061124a5761124a611c9f565b6020026020010151901b604080516101008082018352600080835260208084018290528385018290526060808501839052608080860184905260a080870185905260c080880186905260e09788019590955287519586018852600160f88a901c81168114875260f78a901c811681149487019490945260f689901c84169093149685019690965260ff60ee88901c81169185019190915260e687901c81169584019590955260de86901c85169083015260d685901c84169082015260ce9390931c9091169082015290565b81525082828151811061132a5761132a611c9f565b6020026020010181905250808061134090611d20565b91505061113c565b509392505050565b6005602052816000526040600020818154811061136c57600080fd5b90600052602060002001600091509150505481565b611389611510565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6113c0611510565b6001600160a01b038116611403576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016103d1565b610fe281611894565b8051602082015160408301516060840151608085015160a086015160c087015160e09097015160f89690961b60f79590951b9490941760f69390931b9290921760ee9190911b7e3fc00000000000000000000000000000000000000000000000000000000000161760e69190911b7d3fc000000000000000000000000000000000000000000000000000000000161760de9190911b7c3fc0000000000000000000000000000000000000000000000000000000161760d69290921b7b3fc00000000000000000000000000000000000000000000000000000169190911760ce9190911b7a3fc000000000000000000000000000000000000000000000000000161790565b6000546001600160a01b03163314610ff7576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016103d1565b6040805142602082015244918101919091526bffffffffffffffffffffffff1933606090811b82168184015232901b16607482015260009082906088016040516020818303038152906040528051906020012060001c610d529190611dff565b6040805160038082526080820190925260609160009190816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816115d25790505090506000805b60038110156117265784816003811061162057611620611c9f565b6020020151156117145760408051606081018252600080825260208201819052918101919091526002546001600160a01b031663ef7c895987846003811061166a5761166a611c9f565b60200201516040518263ffffffff1660e01b815260040161168d91815260200190565b606060405180830381865afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce9190611e21565b60ff90811660408501529081166020840152168152835181908590859081106116f9576116f9611c9f565b6020026020010181905250828061170f90611d20565b935050505b8061171e81611d20565b915050611605565b50909392505050565b60008060008360ff1660000361174e57506001915060009050806117e9565b8360ff1660010361178757605a6117656064611556565b1061177957506000915060019050816117e9565b5060009150819050806117e9565b8360ff166002036117a157506000915081905060016117e9565b60405162461bcd60e51b815260206004820152600f60248201527f696e76616c6964206162696c697479000000000000000000000000000000000060448201526064016103d1565b9193909250565b80600103611890576064611805600584611dff565b60000361181157506103e85b6003546040517f79c65068000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906379c6506890604401600060405180830381600087803b15801561187657600080fd5b505af115801561188a573d6000803e3d6000fd5b50505050505b5050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114610fe257600080fd5b60006020828403121561191857600080fd5b8135611923816118f1565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156119635761196361192a565b60405290565b60006060828403121561197b57600080fd5b82601f83011261198a57600080fd5b611992611940565b8060608401858111156119a457600080fd5b845b818110156119be5780358452602093840193016119a6565b509095945050505050565b8015158114610fe257600080fd5b80356119e2816119c9565b919050565b60ff81168114610fe257600080fd5b80356119e2816119e7565b6000610100808385031215611a1557600080fd5b6040519081019067ffffffffffffffff82118183101715611a3857611a3861192a565b8160405280925083359150611a4c826119c9565b818152611a5b602085016119d7565b6020820152611a6c604085016119d7565b6040820152611a7d606085016119f6565b6060820152611a8e608085016119f6565b6080820152611a9f60a085016119f6565b60a0820152611ab060c085016119f6565b60c0820152611ac160e085016119f6565b60e0820152505092915050565b6000806102008385031215611ae257600080fd5b611aec8484611a01565b9150611afc846101008501611a01565b90509250929050565b600060208284031215611b1757600080fd5b5035919050565b80511515825260208101511515602083015260408101511515604083015260ff606082015116606083015260ff608082015116608083015260a0810151611b6a60a084018260ff169052565b5060c0810151611b7f60c084018260ff169052565b5060e0810151611b9460e084018260ff169052565b505050565b6101008101610d528284611b1e565b6020808252825182820181905260009190848201906040850190845b81811015611bff578351611bd9848251611b1e565b850151611bea610100850182611b1e565b50928401926102009290920191600101611bc4565b50909695505050505050565b60008060408385031215611c1e57600080fd5b50508035926020909101359150565b60006101008284031215611c4057600080fd5b6119238383611a01565b600060608284031215611c5c57600080fd5b82601f830112611c6b57600080fd5b611c73611940565b806060840185811115611c8557600080fd5b845b818110156119be578051845260209384019301611c87565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611cc757600080fd5b8151611923816119c9565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103611cfe57611cfe611cd2565b60010192915050565b60ff8281168282160390811115610d5257610d52611cd2565b600060018201611d3257611d32611cd2565b5060010190565b600081518084526020808501945080840160005b83811015611d87578151805160ff9081168952848201518116858a0152604091820151169088015260609096019590820190600101611d4d565b509495945050505050565b6001600160a01b038616815284602082015260a060408201526000611dba60a0830186611d39565b8281036060840152611dcc8186611d39565b91505060ff831660808301529695505050505050565b600060208284031215611df457600080fd5b8151611923816118f1565b600082611e1c57634e487b7160e01b600052601260045260246000fd5b500690565b600080600060608486031215611e3657600080fd5b8351611e41816119e7565b6020850151909350611e52816119e7565b6040850151909250611e63816119e7565b80915050925092509256fea2646970667358221220602fdd8aa0c1b4d7ecd047f95a05071852a95b54423fae7f937e628912041fb064736f6c63430008140033";

export class ExPopulusCardGameLogic__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _cards: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExPopulusCardGameLogic> {
    return super.deploy(
      _cards,
      _token,
      overrides || {}
    ) as Promise<ExPopulusCardGameLogic>;
  }
  getDeployTransaction(
    _cards: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_cards, _token, overrides || {});
  }
  attach(address: string): ExPopulusCardGameLogic {
    return super.attach(address) as ExPopulusCardGameLogic;
  }
  connect(signer: Signer): ExPopulusCardGameLogic__factory {
    return super.connect(signer) as ExPopulusCardGameLogic__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExPopulusCardGameLogicInterface {
    return new utils.Interface(_abi) as ExPopulusCardGameLogicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExPopulusCardGameLogic {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ExPopulusCardGameLogic;
  }
}
