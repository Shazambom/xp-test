/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ExPopulusCardGameLogicInterface extends ethers.utils.Interface {
  functions: {
    "battle(uint256[3])": FunctionFragment;
    "cards()": FunctionFragment;
    "decodeState(uint256)": FunctionFragment;
    "encodeState((bool,bool,bool,uint8,uint8,uint8,uint8,uint8))": FunctionFragment;
    "gameTurns(uint256,uint256)": FunctionFragment;
    "getGameTurns(uint256)": FunctionFragment;
    "getTurn((bool,bool,bool,uint8,uint8,uint8,uint8,uint8),(bool,bool,bool,uint8,uint8,uint8,uint8,uint8))": FunctionFragment;
    "owner()": FunctionFragment;
    "records(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCards(address)": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validate(uint256[3])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "battle",
    values: [[BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(functionFragment: "cards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decodeState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeState",
    values: [
      {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gameTurns",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameTurns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTurn",
    values: [
      {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      },
      {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "records", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setCards", values: [string]): string;
  encodeFunctionData(functionFragment: "setToken", values: [string]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [[BigNumberish, BigNumberish, BigNumberish]]
  ): string;

  decodeFunctionResult(functionFragment: "battle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameTurns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameTurns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "records", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;

  events: {
    "BattleResult(address,uint256,tuple[],tuple[],uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BattleResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type BattleResultEvent = TypedEvent<
  [
    string,
    BigNumber,
    ([number, number, number] & {
      attack: number;
      health: number;
      ability: number;
    })[],
    ([number, number, number] & {
      attack: number;
      health: number;
      ability: number;
    })[],
    number
  ] & {
    player: string;
    gameHash: BigNumber;
    playerDeck: ([number, number, number] & {
      attack: number;
      health: number;
      ability: number;
    })[];
    enemyDeck: ([number, number, number] & {
      attack: number;
      health: number;
      ability: number;
    })[];
    result: number;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class ExPopulusCardGameLogic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ExPopulusCardGameLogicInterface;

  functions: {
    battle(
      ids: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cards(overrides?: CallOverrides): Promise<[string]>;

    decodeState(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, boolean, boolean, number, number, number, number, number] & {
          abilityUsed: boolean;
          frozen: boolean;
          shielded: boolean;
          health: number;
          ability: number;
          attack: number;
          index: number;
          length: number;
        }
      ]
    >;

    encodeState(
      state: {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gameTurns(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGameTurns(
      gameHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            boolean,
            boolean,
            boolean,
            number,
            number,
            number,
            number,
            number
          ] & {
            abilityUsed: boolean;
            frozen: boolean;
            shielded: boolean;
            health: number;
            ability: number;
            attack: number;
            index: number;
            length: number;
          },
          [
            boolean,
            boolean,
            boolean,
            number,
            number,
            number,
            number,
            number
          ] & {
            abilityUsed: boolean;
            frozen: boolean;
            shielded: boolean;
            health: number;
            ability: number;
            attack: number;
            index: number;
            length: number;
          }
        ] & {
          playerState: [
            boolean,
            boolean,
            boolean,
            number,
            number,
            number,
            number,
            number
          ] & {
            abilityUsed: boolean;
            frozen: boolean;
            shielded: boolean;
            health: number;
            ability: number;
            attack: number;
            index: number;
            length: number;
          };
          enemyState: [
            boolean,
            boolean,
            boolean,
            number,
            number,
            number,
            number,
            number
          ] & {
            abilityUsed: boolean;
            frozen: boolean;
            shielded: boolean;
            health: number;
            ability: number;
            attack: number;
            index: number;
            length: number;
          };
        })[]
      ]
    >;

    getTurn(
      playerState: {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      },
      enemyState: {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    records(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        wins: BigNumber;
        losses: BigNumber;
        draws: BigNumber;
        streak: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCards(
      _cards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validate(
      ids: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  battle(
    ids: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cards(overrides?: CallOverrides): Promise<string>;

  decodeState(
    data: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, number, number, number, number, number] & {
      abilityUsed: boolean;
      frozen: boolean;
      shielded: boolean;
      health: number;
      ability: number;
      attack: number;
      index: number;
      length: number;
    }
  >;

  encodeState(
    state: {
      abilityUsed: boolean;
      frozen: boolean;
      shielded: boolean;
      health: BigNumberish;
      ability: BigNumberish;
      attack: BigNumberish;
      index: BigNumberish;
      length: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gameTurns(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGameTurns(
    gameHash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [boolean, boolean, boolean, number, number, number, number, number] & {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: number;
        ability: number;
        attack: number;
        index: number;
        length: number;
      },
      [boolean, boolean, boolean, number, number, number, number, number] & {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: number;
        ability: number;
        attack: number;
        index: number;
        length: number;
      }
    ] & {
      playerState: [
        boolean,
        boolean,
        boolean,
        number,
        number,
        number,
        number,
        number
      ] & {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: number;
        ability: number;
        attack: number;
        index: number;
        length: number;
      };
      enemyState: [
        boolean,
        boolean,
        boolean,
        number,
        number,
        number,
        number,
        number
      ] & {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: number;
        ability: number;
        attack: number;
        index: number;
        length: number;
      };
    })[]
  >;

  getTurn(
    playerState: {
      abilityUsed: boolean;
      frozen: boolean;
      shielded: boolean;
      health: BigNumberish;
      ability: BigNumberish;
      attack: BigNumberish;
      index: BigNumberish;
      length: BigNumberish;
    },
    enemyState: {
      abilityUsed: boolean;
      frozen: boolean;
      shielded: boolean;
      health: BigNumberish;
      ability: BigNumberish;
      attack: BigNumberish;
      index: BigNumberish;
      length: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  records(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      wins: BigNumber;
      losses: BigNumber;
      draws: BigNumber;
      streak: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCards(
    _cards: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validate(
    ids: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    battle(
      ids: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    cards(overrides?: CallOverrides): Promise<string>;

    decodeState(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, number, number, number, number, number] & {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: number;
        ability: number;
        attack: number;
        index: number;
        length: number;
      }
    >;

    encodeState(
      state: {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameTurns(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameTurns(
      gameHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [boolean, boolean, boolean, number, number, number, number, number] & {
          abilityUsed: boolean;
          frozen: boolean;
          shielded: boolean;
          health: number;
          ability: number;
          attack: number;
          index: number;
          length: number;
        },
        [boolean, boolean, boolean, number, number, number, number, number] & {
          abilityUsed: boolean;
          frozen: boolean;
          shielded: boolean;
          health: number;
          ability: number;
          attack: number;
          index: number;
          length: number;
        }
      ] & {
        playerState: [
          boolean,
          boolean,
          boolean,
          number,
          number,
          number,
          number,
          number
        ] & {
          abilityUsed: boolean;
          frozen: boolean;
          shielded: boolean;
          health: number;
          ability: number;
          attack: number;
          index: number;
          length: number;
        };
        enemyState: [
          boolean,
          boolean,
          boolean,
          number,
          number,
          number,
          number,
          number
        ] & {
          abilityUsed: boolean;
          frozen: boolean;
          shielded: boolean;
          health: number;
          ability: number;
          attack: number;
          index: number;
          length: number;
        };
      })[]
    >;

    getTurn(
      playerState: {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      },
      enemyState: {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    records(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        wins: BigNumber;
        losses: BigNumber;
        draws: BigNumber;
        streak: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCards(_cards: string, overrides?: CallOverrides): Promise<void>;

    setToken(_token: string, overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validate(
      ids: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BattleResult(address,uint256,tuple[],tuple[],uint8)"(
      player?: null,
      gameHash?: null,
      playerDeck?: null,
      enemyDeck?: null,
      result?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        ([number, number, number] & {
          attack: number;
          health: number;
          ability: number;
        })[],
        ([number, number, number] & {
          attack: number;
          health: number;
          ability: number;
        })[],
        number
      ],
      {
        player: string;
        gameHash: BigNumber;
        playerDeck: ([number, number, number] & {
          attack: number;
          health: number;
          ability: number;
        })[];
        enemyDeck: ([number, number, number] & {
          attack: number;
          health: number;
          ability: number;
        })[];
        result: number;
      }
    >;

    BattleResult(
      player?: null,
      gameHash?: null,
      playerDeck?: null,
      enemyDeck?: null,
      result?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        ([number, number, number] & {
          attack: number;
          health: number;
          ability: number;
        })[],
        ([number, number, number] & {
          attack: number;
          health: number;
          ability: number;
        })[],
        number
      ],
      {
        player: string;
        gameHash: BigNumber;
        playerDeck: ([number, number, number] & {
          attack: number;
          health: number;
          ability: number;
        })[];
        enemyDeck: ([number, number, number] & {
          attack: number;
          health: number;
          ability: number;
        })[];
        result: number;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    battle(
      ids: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cards(overrides?: CallOverrides): Promise<BigNumber>;

    decodeState(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeState(
      state: {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameTurns(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameTurns(
      gameHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTurn(
      playerState: {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      },
      enemyState: {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    records(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCards(
      _cards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validate(
      ids: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    battle(
      ids: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeState(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeState(
      state: {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameTurns(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameTurns(
      gameHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTurn(
      playerState: {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      },
      enemyState: {
        abilityUsed: boolean;
        frozen: boolean;
        shielded: boolean;
        health: BigNumberish;
        ability: BigNumberish;
        attack: BigNumberish;
        index: BigNumberish;
        length: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    records(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCards(
      _cards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validate(
      ids: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
